1/11/2021:
  In the middle of transmogrifying things to use flow_run_steps intead of the flow_run itself for state.
  
  Next will need to make sure the watcher.py does what it should (write logs, track state in the db)
    * also minimize repetitive writes by comparing the state in the db
  
  Then figure out how to expose the state in a live way to the client (either a long streaming GET or websockets)

  


  need to implement logging with automatic rotation
  
  in the middle of implementing a new view page for a flow.


-----------------------------------------------------------
<flow name>                                   <run button>

each step:
  <step name, image, and command>

each run:
  <bar graph with color as state and height as duration>

each step for selected run (default to most recent):
  show status and duration as a long horizontal bar
  log output for that step

   ______
  ğŸ­»|      ğŸ­°ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ®€ğŸ­°
|                                ğŸ­µ
|                                ğŸ­µ
|                                ğŸ­µ
|          LOGS                  ğŸ­µ
|                                ğŸ­µ
|                                ğŸ­µ
|                                ğŸ­µ
|________________________________


After that we need to make sure we emit events over the socket for
changes in state and incorporate them into the UI.

And make sure log requesting is all tied up.

And that's a v0.00001 demo.

Next would be:
  Actual DAGs
  Actual scheduler
  Tests?
  Longer running job?
  Using private images?
  Easy linking to logdna / papertrail / whatever?
