/* src/Dags.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import Dag from "./ListItemDag.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (10:2) {#each dags || [] as dag}
function create_each_block(ctx) {
	let dag;
	let current;
	dag = new Dag({ props: { name: /*dag*/ ctx[1] } });

	return {
		c() {
			create_component(dag.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dag, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dag_changes = {};
			if (dirty & /*dags*/ 1) dag_changes.name = /*dag*/ ctx[1];
			dag.$set(dag_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dag.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dag.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dag, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div0;
	let t0;
	let div11;
	let current;
	let each_value = /*dags*/ ctx[0] || [];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div11 = element("div");

			div11.innerHTML = `<div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8"><div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8"><div class="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg"><table class="min-w-full divide-y divide-gray-200"><thead class="bg-gray-50"><tr><th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th> 
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th> 
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th> 
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th> 
              <th scope="col" class="relative px-6 py-3"><span class="sr-only">Edit</span></th></tr></thead> 
          <tbody class="bg-white divide-y divide-gray-200"><tr><td class="px-6 py-4 whitespace-nowrap"><div class="flex items-center"><div class="flex-shrink-0 h-10 w-10"><img class="h-10 w-10 rounded-full" src="https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=facearea&amp;facepad=4&amp;w=256&amp;h=256&amp;q=60" alt=""/></div> 
                  <div class="ml-4"><div class="text-sm font-medium text-gray-900">Jane Cooper</div> 
                    <div class="text-sm text-gray-500">jane.cooper@example.com</div></div></div></td> 
              <td class="px-6 py-4 whitespace-nowrap"><div class="text-sm text-gray-900">Regional Paradigm Technician</div> 
                <div class="text-sm text-gray-500">Optimization</div></td> 
              <td class="px-6 py-4 whitespace-nowrap"><span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Active</span></td> 
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Admin</td> 
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium"><a href="#" class="text-indigo-600 hover:text-indigo-900">Edit</a></td></tr></tbody></table></div></div></div>`;

			attr(div0, "class", "flex flex-col");
			attr(div11, "class", "flex flex-col");
		},
		m(target, anchor) {
			insert(target, div0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			insert(target, t0, anchor);
			insert(target, div11, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*dags*/ 1) {
				each_value = /*dags*/ ctx[0] || [];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div11);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { dags } = $$props;

	$$self.$$set = $$props => {
		if ("dags" in $$props) $$invalidate(0, dags = $$props.dags);
	};

	return [dags];
}

class Dags extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { dags: 0 });
	}
}

export default Dags;