/* src/FlowRunChart.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text
} from "../web_modules/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (25:4) {:else}
function create_else_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "p-2 w-4 m-1");
			set_style(div, "height", /*run*/ ctx[3].duration + "em");
			set_style(div, "background-color", /*colors*/ ctx[2]["pending"]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*runs*/ 1) {
				set_style(div, "height", /*run*/ ctx[3].duration + "em");
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (23:4) {#if run.status}
function create_if_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "p-2 w-4 m-1");
			set_style(div, "height", /*run*/ ctx[3].duration + "em");
			set_style(div, "background-color", /*colors*/ ctx[2][/*run*/ ctx[3].status]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*runs*/ 1) {
				set_style(div, "height", /*run*/ ctx[3].duration + "em");
			}

			if (dirty & /*runs*/ 1) {
				set_style(div, "background-color", /*colors*/ ctx[2][/*run*/ ctx[3].status]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (22:2) {#each runs as run}
function create_each_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*run*/ ctx[3].status) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let span0;
	let t0_value = toTimeString(/*max_run_duration*/ ctx[1]) + "";
	let t0;
	let t1;
	let span1;
	let t3;
	let each_value = /*runs*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			span1 = element("span");
			span1.textContent = `${toTimeString(0)}`;
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span0, "class", "text-gray-200");
			attr(span1, "class", "text-gray-200");
			attr(div0, "class", "flex flex-col justify-between");
			set_style(div0, "height", "5em");
			set_style(div0, "width", "2em");
			attr(div1, "class", "flex items-end border-b border-t m-4");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span0);
			append(span0, t0);
			append(div0, t1);
			append(div0, span1);
			append(div1, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*max_run_duration*/ 2 && t0_value !== (t0_value = toTimeString(/*max_run_duration*/ ctx[1]) + "")) set_data(t0, t0_value);

			if (dirty & /*runs, colors*/ 5) {
				each_value = /*runs*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

function toTimeString(seconds) {
	return new Date(seconds * 1000).toUTCString().match(/(\d\d:\d\d:\d\d)/)[0];
}

function instance($$self, $$props, $$invalidate) {
	let max_run_duration;
	let { runs } = $$props;
	console.log(runs);

	let colors = {
		succeeded: "green",
		failed: "red",
		pending: "yellow"
	};

	$$self.$$set = $$props => {
		if ("runs" in $$props) $$invalidate(0, runs = $$props.runs);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*runs*/ 1) {
			$: $$invalidate(1, max_run_duration = Math.max(...runs.map(r => +r.duration)));
		}
	};

	return [runs, max_run_duration, colors];
}

class FlowRunChart extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { runs: 0 });
	}
}

export default FlowRunChart;