/* src/FlowRunChart.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	is_function,
	listen,
	noop,
	safe_not_equal,
	space
} from "../web_modules/svelte/internal.js";

import { fade } from "../web_modules/svelte/transition.js";
import * as d3Scale from "../web_modules/d3-scale.js";
import * as d3Axis from "../web_modules/d3-axis.js";
import * as d3 from "../web_modules/d3-array.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

// (63:6) {#if run.flow_run_steps}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value_1 = /*run*/ ctx[8].flow_run_steps;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*colors, runs*/ 9) {
				each_value_1 = /*run*/ ctx[8].flow_run_steps;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (67:10) {:else}
function create_else_block(ctx) {
	let div;
	let div_class_value;

	return {
		c() {
			div = element("div");
			attr(div, "class", div_class_value = "p-1 h-4 w-4 m-1 " + /*colors*/ ctx[3].pending);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (65:10) {#if step.ended_at}
function create_if_block_1(ctx) {
	let div;
	let div_class_value;

	return {
		c() {
			div = element("div");
			attr(div, "class", div_class_value = "p-1 h-4 w-4 m-1 " + /*colors*/ ctx[3][/*run*/ ctx[8].status]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*runs*/ 1 && div_class_value !== (div_class_value = "p-1 h-4 w-4 m-1 " + /*colors*/ ctx[3][/*run*/ ctx[8].status])) {
				attr(div, "class", div_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (64:8) {#each run.flow_run_steps as step}
function create_each_block_1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*step*/ ctx[11].ended_at) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (61:2) {#each runs as run}
function create_each_block(ctx) {
	let div;
	let t;
	let div_class_value;
	let mounted;
	let dispose;
	let if_block = /*run*/ ctx[8].flow_run_steps && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();

			attr(div, "class", div_class_value = "border rounded m-1 " + (/*selected*/ ctx[2] == /*run*/ ctx[8].id
			? "ring-4 ring-inset ring-green"
			: ""));
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);

			if (!mounted) {
				dispose = listen(div, "click", function () {
					if (is_function(/*select*/ ctx[4](/*run*/ ctx[8].id))) /*select*/ ctx[4](/*run*/ ctx[8].id).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*run*/ ctx[8].flow_run_steps) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*selected, runs*/ 5 && div_class_value !== (div_class_value = "border rounded m-1 " + (/*selected*/ ctx[2] == /*run*/ ctx[8].id
			? "ring-4 ring-inset ring-green"
			: ""))) {
				attr(div, "class", div_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[5]);
	let each_value = /*runs*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "flex");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (!mounted) {
				dispose = listen(window, "resize", /*onwindowresize*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*selected, runs, select, colors*/ 29) {
				each_value = /*runs*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

let margin = 50;

function toTimeString(seconds) {
	return new Date(seconds * 1000).toUTCString().match(/(\d\d:\d\d:\d\d)/)[0];
}

function instance($$self, $$props, $$invalidate) {
	let max_run_duration;
	let { runs } = $$props;
	let curdate, width;
	let selected = runs[runs.length - 1].id;

	// let x = d3Scale.scaleTime()
	//           .domain(d3.extent(runs.map(r => r.run_steps.map(s => s.duration))))
	//           .range(margin, width - margin)
	// console.log(x)
	let colors = {
		succeeded: "bg-green-500",
		failed: "bg-red-500",
		pending: "bg-yellow-500"
	};

	setInterval(
		() => {
			curdate = new Date();
		},
		500
	);

	function select(id) {
		return () => $$invalidate(2, selected = id);
	}

	function onwindowresize() {
		$$invalidate(1, width = window.innerWidth)
	}

	$$self.$$set = $$props => {
		if ("runs" in $$props) $$invalidate(0, runs = $$props.runs);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*runs*/ 1) {
			$: max_run_duration = Math.max(...runs.map(r => +r.duration || 0));
		}
	};

	return [runs, width, selected, colors, select, onwindowresize];
}

class FlowRunChart extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { runs: 0 });
	}
}

export default FlowRunChart;