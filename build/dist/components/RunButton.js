/* src/components/RunButton.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	is_function,
	listen,
	noop,
	safe_not_equal
} from "../../web_modules/svelte/internal.js";

function create_fragment(ctx) {
	let span;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			button = element("button");

			button.innerHTML = `<svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0
        011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>
    Run`;

			attr(button, "type", "button");
			attr(button, "class", "inline-flex items-center px-4 py-2 border border-transparent\n    rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600\n    hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2\n    focus:ring-indigo-500");
			attr(span, "class", "sm:ml-3");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, button);

			if (!mounted) {
				dispose = listen(button, "click", function () {
					if (is_function(/*runFlow*/ ctx[0])) /*runFlow*/ ctx[0].apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { runFlow } = $$props;

	$$self.$$set = $$props => {
		if ("runFlow" in $$props) $$invalidate(0, runFlow = $$props.runFlow);
	};

	return [runFlow];
}

class RunButton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { runFlow: 0 });
	}
}

export default RunButton;