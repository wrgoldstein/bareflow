import __SNOWPACK_ENV__ from '../__snowpack__/env.js';
import.meta.env = __SNOWPACK_ENV__;

/* src/App.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { onMount } from "../web_modules/svelte.js";
import Dags from "./ListDags.js";

function create_fragment(ctx) {
	let header;
	let t0;
	let div8;
	let nav;
	let t11;
	let main;
	let div7;
	let div6;
	let dags_1;
	let current;
	dags_1 = new Dags({ props: { dags: /*dags*/ ctx[0] } });

	return {
		c() {
			header = element("header");
			t0 = space();
			div8 = element("div");
			nav = element("nav");

			nav.innerHTML = `<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"><div class="flex items-center justify-between h-16"><div class="flex items-center"><div class="flex-shrink-0"><img class="h-8 w-8" src="https://tailwindui.com/img/logos/workflow-mark-indigo-500.svg" alt="Workflow"/></div> 
          <div class="hidden md:block"><div class="ml-10 flex items-baseline space-x-4"><a href="#" class="bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-medium">Dags</a> 

              <a href="#" class="text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Placeholder</a> 

              <a href="#" class="text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Placeholder</a> 

              <a href="#" class="text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Placeholder</a> 

              <a href="#" class="text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Placeholder</a></div></div></div></div></div>`;

			t11 = space();
			main = element("main");
			div7 = element("div");
			div6 = element("div");
			create_component(dags_1.$$.fragment);
			attr(header, "class", "h-full bg-blue-400 h-6");
			attr(nav, "class", "bg-gray-800");
			attr(div6, "class", "px-4 py-6 sm:px-0");
			attr(div7, "class", "max-w-7xl mx-auto py-6 sm:px-6 lg:px-8");
		},
		m(target, anchor) {
			insert(target, header, anchor);
			insert(target, t0, anchor);
			insert(target, div8, anchor);
			append(div8, nav);
			append(div8, t11);
			append(div8, main);
			append(main, div7);
			append(div7, div6);
			mount_component(dags_1, div6, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const dags_1_changes = {};
			if (dirty & /*dags*/ 1) dags_1_changes.dags = /*dags*/ ctx[0];
			dags_1.$set(dags_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dags_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dags_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(header);
			if (detaching) detach(t0);
			if (detaching) detach(div8);
			destroy_component(dags_1);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let dags;
	let sid;
	let page;

	onMount(() => {
		const socket = new WebSocket(`${import.meta.env.SNOWPACK_PUBLIC_SOCKET_URL}/ws`);

		socket.addEventListener("open", function (event) {
			console.log("connected");
		});

		socket.addEventListener("message", event => {
			const message = JSON.parse(event.data);

			switch (message.type) {
				case "sid":
					sid = message.sid;
					break;
				case "dags":
					$$invalidate(0, dags = message.dags);
					break;
				case "update":
					console.log(message);
					break;
			}
		});
	});

	return [dags];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;