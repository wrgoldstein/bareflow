import __SNOWPACK_ENV__ from '../__snowpack__/env.js';
import.meta.env = __SNOWPACK_ENV__;

/* src/App.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import navaid from "../web_modules/navaid.js";
import { onMount } from "../web_modules/svelte.js";
import FlowIndex from "./FlowIndex.js";
import FlowView from "./FlowView.js";
import { flows, page, flow_id } from "./stores.js";

function create_else_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.textContent = "404 Not found";
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (88:41) 
function create_if_block_1(ctx) {
	let flowview;
	let current;
	flowview = new FlowView({ props: { router: /*router*/ ctx[1] } });

	return {
		c() {
			create_component(flowview.$$.fragment);
		},
		m(target, anchor) {
			mount_component(flowview, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(flowview.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(flowview.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(flowview, detaching);
		}
	};
}

// (86:10) {#if $page == 'home'}
function create_if_block(ctx) {
	let flowindex;
	let current;
	flowindex = new FlowIndex({ props: { router: /*router*/ ctx[1] } });

	return {
		c() {
			create_component(flowindex.$$.fragment);
		},
		m(target, anchor) {
			mount_component(flowindex, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(flowindex.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(flowindex.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(flowindex, detaching);
		}
	};
}

function create_fragment(ctx) {
	let header;
	let t0;
	let div8;
	let nav;
	let div5;
	let div4;
	let div3;
	let div0;
	let t1;
	let div2;
	let div1;
	let a0;
	let t3;
	let a1;
	let t5;
	let main;
	let div7;
	let div6;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$page*/ ctx[0] == "home") return 0;
		if (/*$page*/ ctx[0] == "view_flow") return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			header = element("header");
			t0 = space();
			div8 = element("div");
			nav = element("nav");
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			div0.innerHTML = `<img class="h-8 w-8" src="https://tailwindui.com/img/logos/workflow-mark-indigo-500.svg" alt="Workflow"/>`;
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			a0 = element("a");
			a0.textContent = "Flows";
			t3 = space();
			a1 = element("a");
			a1.textContent = "Placeholder";
			t5 = space();
			main = element("main");
			div7 = element("div");
			div6 = element("div");
			if_block.c();
			attr(header, "class", "h-full bg-blue-400 h-6");
			attr(div0, "class", "flex-shrink-0");
			attr(a0, "href", "#");
			attr(a0, "class", "bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-medium");
			attr(a1, "href", "#");
			attr(a1, "class", "text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium");
			attr(div1, "class", "ml-10 flex items-baseline space-x-4");
			attr(div2, "class", "hidden md:block");
			attr(div3, "class", "flex items-center");
			attr(div4, "class", "flex items-center justify-between h-16");
			attr(div5, "class", "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8");
			attr(nav, "class", "bg-gray-800");
			attr(div6, "class", "px-4 py-6 sm:px-0");
			attr(div7, "class", "max-w-7xl mx-auto py-6 sm:px-6 lg:px-8");
		},
		m(target, anchor) {
			insert(target, header, anchor);
			insert(target, t0, anchor);
			insert(target, div8, anchor);
			append(div8, nav);
			append(nav, div5);
			append(div5, div4);
			append(div4, div3);
			append(div3, div0);
			append(div3, t1);
			append(div3, div2);
			append(div2, div1);
			append(div1, a0);
			append(div1, t3);
			append(div1, a1);
			append(div8, t5);
			append(div8, main);
			append(main, div7);
			append(div7, div6);
			if_blocks[current_block_type_index].m(div6, null);
			current = true;

			if (!mounted) {
				dispose = listen(a0, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div6, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(header);
			if (detaching) detach(t0);
			if (detaching) detach(div8);
			if_blocks[current_block_type_index].d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $flows;
	let $page;
	component_subscribe($$self, flows, $$value => $$invalidate(4, $flows = $$value));
	component_subscribe($$self, page, $$value => $$invalidate(0, $page = $$value));
	let sid;
	let router = navaid();

	onMount(async () => {
		router.on("/", () => {
			page.set("home");
		}).on("/flows/:flow_id", params => {
			page.set("view_flow");
			flow_id.set(params.flow_id);
		});

		router.listen();
		const socket = new WebSocket(`${import.meta.env.SNOWPACK_PUBLIC_SOCKET_URL}/ws`);

		socket.addEventListener("open", function (event) {
			console.log("connected");
		});

		socket.addEventListener("message", event => {
			const message = JSON.parse(event.data);

			switch (message.type) {
				case "sid":
					sid = message.sid;
					break;
				case "flows":
					flows.set(message.flows);
					break;
				case "stats":
					// assign the initial stats to their flows
					for (let _flow_id in message.stats) {
						if (_flow_id in $flows) {
							let temp = $flows[_flow_id];
							temp["runs"] = message.stats[_flow_id];

							flows.update(self => {
								self[_flow_id] = temp;
								return self;
							});
						}
					}
					break;
				case "event":
					console.log(message);
					break;
			}
		});
	});

	const click_handler = () => router.route("/", true);
	return [$page, router, click_handler];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;