/* src/FlowView.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { flow, flow_id } from "./stores.js";
import RunButton from "./RunButton.js";

function create_else_block(ctx) {
	let t;

	return {
		c() {
			t = text("loading");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (32:0) {#if $flow}
function create_if_block(ctx) {
	let div2;
	let div0;
	let h2;
	let t0;
	let t1;
	let div1;
	let runbutton;
	let t2;
	let div3;
	let t3;
	let div6;
	let div5;
	let div4;
	let span;
	let t4;
	let pre;
	let t5;
	let current;
	runbutton = new RunButton({ props: { runFlow: /*runFlow*/ ctx[4] } });
	let if_block = /*pod*/ ctx[3] && create_if_block_1(ctx);

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			h2 = element("h2");
			t0 = text(/*$flow_id*/ ctx[1]);
			t1 = space();
			div1 = element("div");
			create_component(runbutton.$$.fragment);
			t2 = space();
			div3 = element("div");
			t3 = space();
			div6 = element("div");
			div5 = element("div");
			div4 = element("div");
			span = element("span");
			if (if_block) if_block.c();
			t4 = space();
			pre = element("pre");
			t5 = text(/*logs*/ ctx[0]);
			attr(h2, "class", "text-2xl font-bold leading-7 text-gray-900 sm:text-3xl\n        sm:truncate");
			attr(div0, "class", "flex-1 min-w-0");
			attr(div1, "class", "mt-5 flex lg:mt-0 lg:ml-4");
			attr(div2, "class", "lg:flex lg:items-center lg:justify-between");
			attr(span, "class", "sm:ml-3");
			attr(div4, "class", "flex mb-4");
			attr(pre, "class", "whitespace-pre-wrap");
			attr(div5, "class", "px-4 py-6 sm:px-0");
			attr(div6, "class", "max-w-7xl mx-auto py-6 sm:px-6 lg:px-8");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, h2);
			append(h2, t0);
			append(div2, t1);
			append(div2, div1);
			mount_component(runbutton, div1, null);
			insert(target, t2, anchor);
			insert(target, div3, anchor);
			insert(target, t3, anchor);
			insert(target, div6, anchor);
			append(div6, div5);
			append(div5, div4);
			append(div4, span);
			if (if_block) if_block.m(span, null);
			append(div5, t4);
			append(div5, pre);
			append(pre, t5);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*$flow_id*/ 2) set_data(t0, /*$flow_id*/ ctx[1]);
			if (/*pod*/ ctx[3]) if_block.p(ctx, dirty);
			if (!current || dirty & /*logs*/ 1) set_data(t5, /*logs*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(runbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(runbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(runbutton);
			if (detaching) detach(t2);
			if (detaching) detach(div3);
			if (detaching) detach(t3);
			if (detaching) detach(div6);
			if (if_block) if_block.d();
		}
	};
}

// (57:10) {#if pod}
function create_if_block_1(ctx) {
	let t0;
	let span;

	return {
		c() {
			t0 = text("Running on pod\n            ");
			span = element("span");
			span.textContent = `${/*pod*/ ctx[3]}`;
			attr(span, "class", "p-1 rounded bg-blue-200");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, span, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$flow*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $flow_id;
	let $flow;
	component_subscribe($$self, flow_id, $$value => $$invalidate(1, $flow_id = $$value));
	component_subscribe($$self, flow, $$value => $$invalidate(2, $flow = $$value));
	let pod;
	let logs = "";
	let uint8array = new TextDecoder("utf-8");

	const runFlow = async () => {
		// todo have some sort of ui state that shows its running
		const res = await fetch(`/run/${$flow_id}`, { method: "POST" });

		// to get to a POC just storing the current pod run after a triggered run
		// no history yet
		showLogs();
	};

	const view = () => {
		
	};

	const showLogs = async () => {
		$$invalidate(0, logs = "");
	}; // const response = await fetch(`/api/logs/${pod}`)
	// const reader = response.body.getReader()
	// while (true){
	//   const { value, done } = await reader.read();

	return [logs, $flow_id, $flow, pod, runFlow];
}

class FlowView extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default FlowView;