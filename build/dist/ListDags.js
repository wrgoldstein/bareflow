/* src/ListDags.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import Dag from "./ListItemDag.js";
import { dags } from "./stores.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (33:12) {#each Object.values($dags) || [] as dag}
function create_each_block(ctx) {
	let dag;
	let current;

	dag = new Dag({
			props: {
				dag: /*dag*/ ctx[2],
				router: /*router*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(dag.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dag, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dag_changes = {};
			if (dirty & /*$dags*/ 2) dag_changes.dag = /*dag*/ ctx[2];
			if (dirty & /*router*/ 1) dag_changes.router = /*router*/ ctx[0];
			dag.$set(dag_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dag.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dag.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dag, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div2;
	let div1;
	let div0;
	let table;
	let thead;
	let t9;
	let tbody;
	let current;
	let each_value = Object.values(/*$dags*/ ctx[1]) || [];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			table = element("table");
			thead = element("thead");

			thead.innerHTML = `<tr><th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dag</th> 
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Schedule</th> 
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th> 
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">History</th> 
              <th scope="col" class="relative px-6 py-3"><span class="sr-only">Edit</span></th></tr>`;

			t9 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(thead, "class", "bg-gray-50");
			attr(tbody, "class", "bg-white divide-y divide-gray-200");
			attr(table, "class", "min-w-full divide-y divide-gray-200");
			attr(div0, "class", "shadow overflow-hidden border-b border-gray-200 sm:rounded-lg");
			attr(div1, "class", "py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8");
			attr(div2, "class", "-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8");
			attr(div3, "class", "flex flex-col");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div1);
			append(div1, div0);
			append(div0, table);
			append(table, thead);
			append(table, t9);
			append(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*Object, $dags, router*/ 3) {
				each_value = Object.values(/*$dags*/ ctx[1]) || [];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tbody, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $dags;
	component_subscribe($$self, dags, $$value => $$invalidate(1, $dags = $$value));
	let { router } = $$props;

	$$self.$$set = $$props => {
		if ("router" in $$props) $$invalidate(0, router = $$props.router);
	};

	return [router, $dags];
}

class ListDags extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { router: 0 });
	}
}

export default ListDags;