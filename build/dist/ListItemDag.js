/* src/ListItemDag.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../web_modules/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (30:4) {#each [1,2,3,4,5] as i}
function create_each_block(ctx) {
	let t_value = (Math.random() > 0.4 ? "üçè" : "üçé") + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let tr;
	let td0;
	let div3;
	let div2;
	let div0;
	let t0_value = /*dag*/ ctx[0].name + "";
	let t0;
	let t1;
	let div1;
	let t2;
	let td1;
	let div4;
	let t3_value = /*dag*/ ctx[0].schedule + "";
	let t3;
	let t4;
	let div5;
	let t5_value = /*dag*/ ctx[0].schedule_words + "";
	let t5;
	let t6;
	let td2;
	let t8;
	let td3;
	let t9;
	let td4;
	let a;
	let mounted;
	let dispose;
	let each_value = [1, 2, 3, 4, 5];
	let each_blocks = [];

	for (let i = 0; i < 5; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			tr = element("tr");
			td0 = element("td");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = space();
			td1 = element("td");
			div4 = element("div");
			t3 = text(t3_value);
			t4 = space();
			div5 = element("div");
			t5 = text(t5_value);
			t6 = space();
			td2 = element("td");
			td2.innerHTML = `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Active</span>`;
			t8 = space();
			td3 = element("td");

			for (let i = 0; i < 5; i += 1) {
				each_blocks[i].c();
			}

			t9 = space();
			td4 = element("td");
			a = element("a");
			a.textContent = "View";
			attr(div0, "class", "text-sm font-medium text-gray-900");
			attr(div1, "class", "text-sm text-gray-500");
			attr(div2, "class", "ml-4");
			attr(div3, "class", "flex items-center");
			attr(td0, "class", "px-6 py-4 whitespace-nowrap");
			attr(div4, "class", "text-sm text-gray-900");
			attr(div5, "class", "text-sm text-gray-500");
			attr(td1, "class", "px-6 py-4 whitespace-nowrap");
			attr(td2, "class", "px-6 py-4 whitespace-nowrap");
			attr(td3, "class", "px-6 py-4 whitespace-nowrap text-sm text-gray-500");
			attr(a, "class", "text-indigo-600 hover:text-indigo-900");
			attr(td4, "class", "px-6 py-4 whitespace-nowrap text-right text-sm font-medium");
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, div3);
			append(div3, div2);
			append(div2, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, div1);
			append(tr, t2);
			append(tr, td1);
			append(td1, div4);
			append(div4, t3);
			append(td1, t4);
			append(td1, div5);
			append(div5, t5);
			append(tr, t6);
			append(tr, td2);
			append(tr, t8);
			append(tr, td3);

			for (let i = 0; i < 5; i += 1) {
				each_blocks[i].m(td3, null);
			}

			append(tr, t9);
			append(tr, td4);
			append(td4, a);

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*dag*/ 1 && t0_value !== (t0_value = /*dag*/ ctx[0].name + "")) set_data(t0, t0_value);
			if (dirty & /*dag*/ 1 && t3_value !== (t3_value = /*dag*/ ctx[0].schedule + "")) set_data(t3, t3_value);
			if (dirty & /*dag*/ 1 && t5_value !== (t5_value = /*dag*/ ctx[0].schedule_words + "")) set_data(t5, t5_value);

			if (dirty & /*Math*/ 0) {
				each_value = [1, 2, 3, 4, 5];
				let i;

				for (i = 0; i < 5; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(td3, null);
					}
				}

				for (; i < 5; i += 1) {
					each_blocks[i].d(1);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(tr);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { dag } = $$props, { router } = $$props;
	const click_handler = () => router.route(`/dags/${dag.name}`, true);

	$$self.$$set = $$props => {
		if ("dag" in $$props) $$invalidate(0, dag = $$props.dag);
		if ("router" in $$props) $$invalidate(1, router = $$props.router);
	};

	return [dag, router, click_handler];
}

class ListItemDag extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { dag: 0, router: 1 });
	}
}

export default ListItemDag;